Scenario 1.

Start one node as Riga, 5761, another as London, 5762.
For each node, add another node as peer.
Generate valid payment request on node1 (Riga) with from field as public key of existing user and to field as public key of some user on node2.
That should result in adding new block on both nodes to blockchain.

Scenario 2.

Start one node as Riga, 5761, another as London, 5762.
For each node, add another node as peer.
Create payment request on node1 (Riga) with from field as public key of node1 and to field as the same public key.
The payment request should be refused (from = to).

Scenario 3.

Start one node as Riga, 5761, another as London, 5762, third as Paris, 5763.
For each node add London node as a peer.
Create payment request on (Riga) with from field as public key of one of users on (Riga) and "to" field as public key of some
user on (Paris).
The payment request go to (Paris) node via (London) node.
New transaction block should be created on (Paris) and propagated to both other nodes.

Scenario 4.

Start one node as Riga, 5761, another as London, 5762, third as Paris, 5763.
For each node, add another node as peer.
Create payment request on node1 (Riga) with from and to as public keys of different users on the same node.
New transaction block should be created immediately and propagated to both other nodes.

Scenario 5.

Start one node as Riga, 5761, another as London, 5762.
For each node, add another node as peer.
Create payment request on (Riga) with from field as public key of one of users on (Riga) and "to" field as public key of some
user on (Paris). Now start Paris node (and add London node as a peer).
New transaction block should be created on (Paris) and propagated to both other nodes.

Scenario 6.

Like Scenario 5, but transaction/block should be created on Paris when the node is just started (seeds already have been set for the node).

Scenario 7.

Like scenario 5, but Riga node is shut down after transaction is initiated and before Paris node is started.
After Paris node confirms payment and creates new block Riga node is started again.
Riga node should receive that new block after start.

Scenario 8.

Like scenario 7, but 4 payments are started at Riga node.
London and Riga nodes should receive all 4 blocks in a correct order (i.e. 4 blocks are added to blockchain).